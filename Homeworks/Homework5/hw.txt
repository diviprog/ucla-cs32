1.
a.
		  	50
	  	20		  60
     	10	       40		70
    	  15        30		    66      80
		  25  38      	      	  75


b.
inorder - 10, 15, 20, 25, 30, 38, 40, 50, 60, 66, 70, 75, 80
preorder - 50, 20, 10, 15, 40, 30, 25, 38, 60, 70, 66, 80, 75
postorder - 15, 10, 25, 38, 30, 40, 20, 66, 75, 80, 70, 60, 50

c.
after deleting 30 -
		  	50
	  	20		  60
     	10	       40		70
    	  15        25		    66      80
		      38      	      	  75


after deleting 30, then 20 -
			50
	  	15		  60
     	10	       40		70
    	            25		    66      80
		      38      	      	  75


2.
a.
struct Node {
	int val;
	Node* left;
	Node* right;
	Node* parent;

	// Constructor
	Node(Node* parent, int val) : parent(parent), val(val), left(nullptr), right(nullptr) {};
}

b.
Function InsertNode(root, value) {
    Create a new node with the given value

    If root is nullptr Then 
        root = newNode
        Return

    // Initialise pointers for traversal
    current = root
    parent = nullptr

    
    While current is not nullptr Do
        Set parent to current

        If the value is already in the tree, do nothing

        // Navigate to the left or right child based on the value
        If value < current.data Then
            Set current to current.left
        Else
            Set current to current.right
        EndIf
    EndWhile

    // Insert the new node as a child of the found parent node
    If value < parent.data Then
        Set parent.left to newNode
    Else
        Set parent.right to newNode
    EndIf

    // Set the parent pointer of the new node to parent
    Set newNode.parent to parent
}


3.
a.
		7
	5		6	
    3       1	    4

b.
[7, 5, 6, 3, 1, 4]

c.
[6, 5, 4, 3, 1]


4.
a. O(C+S)
b. O(log(C)+S)
c. O(log(C)+log(S))
d. O(log(S))
e. O(1)
f. O(log(C)+S)
g. O(S*log(S))
h. O(C*log(S))